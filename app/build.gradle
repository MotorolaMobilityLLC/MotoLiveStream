apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "com.motorola.livestream"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode getCustomVersionCode()
        versionName "${getVersionNameMajor()}"
        resConfigs getSupportedLanguages()
    }
    lintOptions {
        abortOnError false
        checkAllWarnings true
        warningsAsErrors true
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            jni.srcDirs = [] // forces ndk-build to be run from the command line
            assets.srcDirs = ['assets']
        }
    }
    signingConfigs {
        motCommonDebug {
            storeFile file("${rootDir}/tools/certs/common.keystore")
            storePassword "motorola"
            keyAlias "common"
            keyPassword "motorola"
        }
    }
    def proAAPTConfigs = System.getenv("GRADLE_PRODUCT_AAPT_CONFIG")
    if (proAAPTConfigs != null) {
        productFlavors {
            myresConfigs {
                resConfigs proAAPTConfigs
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.motCommonDebug
        }
        release {
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.motCommonDebug
        }
    }

     project.archivesBaseName = "MotoLiveStream-v${getVersionNameMajor()}";
     //def proAAPTConfigs = System.getenv("GRADLE_PRODUCT_AAPT_CONFIG")
     if (proAAPTConfigs != null) {
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                if (variant.buildType.name == "release") {
                    def file = output.outputFile
                    def new_name = file.name.replaceAll(/-v.*-release/,"-release")
                    output.outputFile = new File(file.parent, new_name)
                }
            }
        }
     }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile (name: 'facebook-core-4.35.0', ext: 'aar')
    compile (name: 'facebook-common-4.35.0', ext: 'aar')
    compile (name: 'facebook-login-4.35.0', ext: 'aar')
    compile (name: 'facebook-share-4.35.0', ext: 'aar')
    compile 'com.parse.bolts:bolts-applinks:1.4.0'
    compile 'com.google.code.gson:gson:2.5'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile project(path: ':library')
}

//----moto auto construction config
import java.text.SimpleDateFormat
def dateStamp() {
    def df = new SimpleDateFormat("yyMMdd")
    return df.format(new Date())
}

def commitID() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'show', '-s', '--pretty=oneline'
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(0,7)
}

def getVersionNameMajor() {
    def manifest = new XmlSlurper().parse(file("AndroidManifest.xml"))
    if (manifest==null) {
        throw new StopExecutionException("no manifest file")
    }
    def vn = manifest['@android:versionName'].text()
    if (vn!=null && !vn.equals("")){
        return vn
    }else{
        throw new StopExecutionException("no versioName")
    }
}

def getCustomVersionCode() {
    def manifest = new XmlSlurper().parse(file("AndroidManifest.xml"))
    if (manifest==null) {
        throw new StopExecutionException("no manifest file")
    }
    def vc = manifest['@android:versionCode'].text()
    if (vc!=null && !vc.equals("")){
        if (System.properties['auto_build_num'] == null) return Integer.parseInt(vc)
        vc=Integer.parseInt(vc)+Integer.parseInt(System.properties['auto_build_num'])
        return vc
    }else{
        throw new StopExecutionException("no versioName")
    }
}

def String[] getSupportedLanguages() {
    def langList = []
    def resDirs = new File(getProjectDir().name + File.separator + "src" + File.separator + "main"
            + File.separator + "res")
    def pattern1 = /^values$/
    def pattern2 = /^values-([a-z]{2}|[a-z]{2}-r[A-Z]{2})$/
    def pattern3 = /^values-b\+(.*)$/
    resDirs.eachDirMatch(~/^values.*/) {
        if (directoryEmpty(resDirs.toString() + File.separator + it.name)) return
        if (it.name ==~ pattern1) {
            langList << 'en'
        } else if (it.name ==~ pattern2) {
            def match = it.name =~ pattern2
            langList << match[0][1]
        } else if (it.name ==~ pattern3) {
            def match = it.name =~ pattern3
            langList << match[0][1].replace('+', '_')
        }
    }
    return langList.sort()
}

def boolean directoryEmpty(String path) {
    def dir = new File(path)
    if (!dir.directory) return true
    return dir.list().length == 0
}
